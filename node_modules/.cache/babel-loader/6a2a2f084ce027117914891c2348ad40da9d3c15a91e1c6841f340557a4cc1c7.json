{"ast":null,"code":"var _jsxFileName = \"C:\\\\Test_Task\\\\test-react-app\\\\src\\\\app.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Container, Tab, Tabs, TextField } from '@material-ui/core';\r\nimport UserTable from 'C:/Test_Task/test-react-app/src/components/UserTable';\r\n\r\nconst socket = io('ws://localhost:3050');\r\n\r\nconst App = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [limit, setLimit] = useState(10);\r\n\r\n  useEffect(() => {\r\n    socket.on('data', (data) => {\r\n      // Handle incoming data\r\n      handleIncomingData(data);\r\n    });\r\n\r\n    // Cleanup the socket connection on unmount\r\n    return () => socket.disconnect();\r\n  }, []);\r\n\r\n  const handleIncomingData = (data) => {\r\n    // Check if the incoming data should be added to the list\r\n    if (users.length < limit || data.score > users[users.length - 1]?.score) {\r\n      // Update the state with the new data\r\n      setUsers((prevUsers) => {\r\n        const updatedUsers = [...prevUsers, data].sort((a, b) => b.score - a.score);\r\n        return updatedUsers.slice(0, limit); // Keep only the top 'limit' users\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (userId) => {\r\n    // Remove the user with the specified ID\r\n    const updatedUsers = users.filter((user) => user.id !== userId);\r\n    setUsers(updatedUsers);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    // Update the limit when the input value changes\r\n    const newLimit = parseInt(event.target.value, 10);\r\n    setLimit(newLimit);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Tabs value={0}>\r\n        <Tab label=\"Table\" />\r\n        <Tab label=\"Settings\">\r\n          <TextField\r\n            label=\"Results Limit\"\r\n            type=\"number\"\r\n            value={limit}\r\n            onChange={handleLimitChange}\r\n          />\r\n        </Tab>\r\n      </Tabs>\r\n      <div role=\"tabpanel\" hidden={0 !== 0}>\r\n        <UserTable users={users} onDelete={handleDelete} />\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n*/\n\n// app.js\nimport React from 'react';\nimport WebSocketComponent from 'C:/Test_Task/test-react-app/src/WebSocketComponent';\nimport UsersTable from 'C:/Test_Task/test-react-app/src/components/UserTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [users, setUsers] = React.useState([]);\n  const handleData = data => {\n    setUsers(prevUsers => [...prevUsers, data]);\n  };\n  const handleDelete = id => {\n    setUsers(prevUsers => prevUsers.filter(user => user.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(WebSocketComponent, {\n      onData: handleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UsersTable, {\n      users: users,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gAXO2JN5F09+lSQAgkU4yvYNIT8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","WebSocketComponent","UsersTable","jsxDEV","_jsxDEV","App","_s","users","setUsers","useState","handleData","data","prevUsers","handleDelete","id","filter","user","children","onData","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","_c","$RefreshReg$"],"sources":["C:/Test_Task/test-react-app/src/app.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Container, Tab, Tabs, TextField } from '@material-ui/core';\r\nimport UserTable from 'C:/Test_Task/test-react-app/src/components/UserTable';\r\n\r\nconst socket = io('ws://localhost:3050');\r\n\r\nconst App = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [limit, setLimit] = useState(10);\r\n\r\n  useEffect(() => {\r\n    socket.on('data', (data) => {\r\n      // Handle incoming data\r\n      handleIncomingData(data);\r\n    });\r\n\r\n    // Cleanup the socket connection on unmount\r\n    return () => socket.disconnect();\r\n  }, []);\r\n\r\n  const handleIncomingData = (data) => {\r\n    // Check if the incoming data should be added to the list\r\n    if (users.length < limit || data.score > users[users.length - 1]?.score) {\r\n      // Update the state with the new data\r\n      setUsers((prevUsers) => {\r\n        const updatedUsers = [...prevUsers, data].sort((a, b) => b.score - a.score);\r\n        return updatedUsers.slice(0, limit); // Keep only the top 'limit' users\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (userId) => {\r\n    // Remove the user with the specified ID\r\n    const updatedUsers = users.filter((user) => user.id !== userId);\r\n    setUsers(updatedUsers);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    // Update the limit when the input value changes\r\n    const newLimit = parseInt(event.target.value, 10);\r\n    setLimit(newLimit);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Tabs value={0}>\r\n        <Tab label=\"Table\" />\r\n        <Tab label=\"Settings\">\r\n          <TextField\r\n            label=\"Results Limit\"\r\n            type=\"number\"\r\n            value={limit}\r\n            onChange={handleLimitChange}\r\n          />\r\n        </Tab>\r\n      </Tabs>\r\n      <div role=\"tabpanel\" hidden={0 !== 0}>\r\n        <UserTable users={users} onDelete={handleDelete} />\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n*/\r\n\r\n// app.js\r\nimport React from 'react';\r\nimport WebSocketComponent from 'C:/Test_Task/test-react-app/src/WebSocketComponent';\r\nimport UsersTable from 'C:/Test_Task/test-react-app/src/components/UserTable';\r\n\r\nconst App = () => {\r\n  const [users, setUsers] = React.useState([]);\r\n\r\n  const handleData = (data) => {\r\n    setUsers((prevUsers) => [...prevUsers, data]);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    setUsers((prevUsers) => prevUsers.filter((user) => user.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <WebSocketComponent onData={handleData} />\r\n      <UsersTable users={users} onDelete={handleDelete} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,kBAAkB,MAAM,oDAAoD;AACnF,OAAOC,UAAU,MAAM,sDAAsD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3BH,QAAQ,CAAEI,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,IAAI,CAAC,CAAC;EAC/C,CAAC;EAED,MAAME,YAAY,GAAIC,EAAE,IAAK;IAC3BN,QAAQ,CAAEI,SAAS,IAAKA,SAAS,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EACrE,CAAC;EAED,oBACEV,OAAA;IAAAa,QAAA,gBACEb,OAAA,CAACH,kBAAkB;MAACiB,MAAM,EAAER;IAAW;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1ClB,OAAA,CAACF,UAAU;MAACK,KAAK,EAAEA,KAAM;MAACgB,QAAQ,EAAEV;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV,CAAC;AAAChB,EAAA,CAjBID,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAmBT,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}